# Timeline Analysis Feature - Code Reference

## Quick Start

### 1. Python Timeline Analyzer
**Location:** `e:\kanunai\ai-service\src\models\timeline_analyzer.py`

Key Classes:
- `DateExtractor`: Extracts and parses dates using regex patterns
- `TimelineAnalyzer`: Orchestrates extraction and generates deterministic timelines

Key Methods:
- `extract_dates_from_text(text)`: Returns list of (datetime, context, line_number) tuples
- `extract_timeline_events(text)`: Returns sorted list of events with IDs and types
- `analyze_document(pdf_path)`: Complete pipeline - load, extract, return JSON-serializable events

### 2. Timeline CLI
**Location:** `e:\kanunai\ai-service\src\models\timeline_cli.py`

Usage:
```bash
python timeline_cli.py --pdf /path/to/document.pdf --output /output/directory
```

Returns JSON with structure:
```json
{
  "success": true,
  "events": [...],
  "summary": {
    "total_events": N,
    "event_types": {...},
    "date_range": {"start": "...", "end": "..."},
    "first_event": {...},
    "last_event": {...}
  }
}
```

### 3. Backend API
**Location:** `e:\kanunai\backend\src\controllers\analysis.controller.ts`

Endpoint: `POST /api/analysis/timeline`

Handler Function:
```typescript
export async function analyzeTimeline(req: Request, res: Response)
```

Spawns Python CLI and returns parsed JSON response with events array.

### 4. React Component
**Location:** `e:\kanunai\frontend\src\components\case-analysis\CaseTimeline.tsx`

Props:
```typescript
interface CaseTimelineProps {
  readonly events: TimelineEvent[];
}
```

Event Object:
```typescript
interface TimelineEvent {
  id: string;
  eventName: string;
  date: string;
  eventType: string;
  context?: string;
  lineNumber?: number;
}
```

### 5. Integration Page
**Location:** `e:\kanunai\frontend\src\app\case-analysis\page.tsx`

New State:
```typescript
const [timelineEvents, setTimelineEvents] = useState<TimelineEvent[]>([]);
const [showTimeline, setShowTimeline] = useState(false);
const [timelineLoading, setTimelineLoading] = useState(false);
```

New Function:
```typescript
const analyzeTimeline = async () => {
  // Posts to /api/analysis/timeline
  // Updates state with events
  // Sets showTimeline to display CaseTimeline component
}
```

## Event Type Classification

The system automatically classifies events based on keywords:

```python
EVENT_KEYWORDS = {
    'filing': ['filed', 'petition filed', 'complaint filed', ...],
    'hearing': ['hearing', 'trial', 'oral argument', ...],
    'judgment': ['judgment', 'verdict', 'decision', ...],
    'appeal': ['appeal', 'appellate', 'writ petition', ...],
    'settlement': ['settlement', 'compromise', 'agreed', ...],
    'dismissal': ['dismissed', 'withdrawn', 'quashed', ...],
    'interim': ['interim order', 'stay', 'injunction', ...],
    'adjournment': ['adjourned', 'postponed', 'deferred', ...],
}
```

## Date Format Support

Regex patterns handle:
- `2024-01-15` (ISO)
- `01/15/2024`, `1/15/2024` (US slash)
- `01-15-2024`, `1-15-2024` (US dash)
- `15/01/2024`, `15-01-2024` (EU slash/dash)
- `January 15, 2024`, `Jan. 15, 2024` (Written long)
- `15 January 2024`, `15 Jan 2024` (Written EU)

## Determinism Guarantees

1. **Identical sorting**: Same document always produces dates in identical order
2. **Event IDs**: Deterministic format: `YYYY-MM-DD_N`
3. **Event types**: Same keywords → same classification
4. **Caching**: Per-document caching ensures consistency

Example:
```
Document: Case_2024.pdf
First run:  [Filing: 2024-01-15, Hearing: 2024-03-20, Judgment: 2024-12-10]
Second run: [Filing: 2024-01-15, Hearing: 2024-03-20, Judgment: 2024-12-10] ✓ IDENTICAL
```

## Interactive Features in React Component

**Zoom Controls:**
- Scroll wheel: 0.5x to 3x
- Buttons: -20%, +20%
- Reset button: 1x zoom

**Pan Controls:**
- Click and drag to move
- Smooth transitions when releasing

**Event Hover:**
- Shows tooltip with event context
- Displays line number from original document
- Smooth scale animation on hover

**Responsive:**
- Adapts to container size
- Maintains aspect ratio
- Works on all screen sizes

## Performance Notes

- Date extraction: ~100 lines/second on modern hardware
- Sorting: Stable sort for determinism
- Rendering: SVG transforms for smooth zoom/pan
- Memory: ~1MB per 1000 events

## Error Handling

Backend returns:
```json
{
  "message": "Timeline analysis failed",
  "error": "error details",
  "events": []
}
```

Frontend shows user-friendly alert with error message.

## Testing Checklist

✓ Upload PDF with multiple dates
✓ Click "Generate Timeline" button
✓ Verify timeline displays
✓ Test zoom with scroll wheel
✓ Test pan with click-drag
✓ Hover over events to see tooltips
✓ Click reset button
✓ Verify event colors match type legend
✓ Re-upload same document, verify identical timeline
✓ Test with different date formats
✓ Test with documents having no dates

## Integration Points

1. **File Upload**: Uses existing CaseInputPanel
2. **API Endpoint**: Goes through Express server at backend/src/routes/analysis.routes.ts
3. **State Management**: React hooks in case-analysis/page.tsx
4. **Display**: CaseTimeline component receives props
5. **Styling**: Tailwind CSS with custom SVG styling

## Future Development Areas

1. Add timeline export (PNG, PDF, SVG)
2. Add timeline filtering by date range
3. Add timeline comparison for multiple documents
4. Add event editing and annotations
5. Add timeline relationship mapping
6. Add advanced search across timeline
7. Add timeline to PDF export reports
